
snippet use
'use strict';
endsnippet

snippet div "div" b
<div className='$0'>
</div>
endsnippet
snippet table "table" b
<table>
<tbody>
	<tr>
		<td></td>
		<td></td>
	</tr>
</tbody>
</table>
endsnippet

snippet i "import" b
import $1 from '${2:$1}'
endsnippet
snippet cx "classname"
import cx from 'clsx'
endsnippet
snippet jss "jss"
import jss from 'react-jss'
endsnippet
snippet pt "proptypes"
import PropTypes from 'prop-types'
endsnippet
snippet R "React"
import React from 'react'
endsnippet

snippet * "comment" b
/*
 * $0
 */
endsnippet
snippet ** "comment" b
/**
 * $0
 */
endsnippet
snippet rnp "new Promise"
return new Promise((resolve, reject) => {
	$0
})
endsnippet

# React

snippet react "import React" 
import React from 'react'
endsnippet
snippet mstp "mapStateToProps"
const mapStateToProps = state => ({
	$0
})
endsnippet

snippet mdtp "mapDispatchToProps"
const mapDispatchToProps = dispatch => ({
	$0
})
endsnippet

snippet cns "constructor" b
constructor(props) {
	super(props)
	$0
}
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps(props) {
	$0
}
endsnippet

snippet ss "setState" b
this.setState({ $0 })
endsnippet


# Other

snippet ppl "log" 
console.log(require('util').inspect($0, { colors: true, depth: 3 }))
endsnippet

snippet utilcolor "desc" 
const util = require('util')
util.inspect.defaultOptions =  { colors: true, depth: 3 }
endsnippet

snippet $ "query"
document.querySelector($0)
endsnippet

snippet $$ "queryAll"
document.querySelectorAll($0)
endsnippet

snippet ii "import" b
import { $1 } from '$0'
endsnippet

#requires
snippet req "require" b
const $1 = require('${1:${2:module}}')
endsnippet

snippet "\b((\w|\d|_|\$)+)\.on" ".on(..)" rb
`!p snip.rv = match.group(1)`.on("${1:event}", (${2:event}) => {${3:do}});
endsnippet

snippet def
define(function(require, exports, module) {
"use strict";
var ${1/.*\///} = require("${1}");

${VISUAL}
});
endsnippet

# Lang

# if
snippet if "if" b
if (${1:condition}) {
	${2:// code}
}
endsnippet
# if ... else
snippet ife
if (${1:true}) ${2:{${3:
	//do
}}} else ${4:{${5:
	//od
}}}
endsnippet
snippet elif "else if" 
else ${1:if (${2:expr})} { 
	$0
}
endsnippet
snippet else "else" b
else  { 
	$0;
}
endsnippet
# tertiary conditional
snippet ?
	${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet


# Utils

snippet fs "fs = require..." b
const fs = require('fs')
endsnippet
snippet util "util = require..." b
const util = require('util')
endsnippet
snippet path "path = require..." b
const path = require('path')
endsnippet

snippet l "log" b
console.log($0)
endsnippet
snippet log "log var: $var" b
console.log('$1: ', ${1})
endsnippet

snippet "([\w_0-9]+)!\?" "if not exist" r
${1:`!p snip.rv = match.group(1)`} === null || $1 === undefined
endsnippet
snippet "([\w_0-9]+)\?" "if exist" r
${1:`!p snip.rv = match.group(1)`} !== null && $1 !== undefined
endsnippet

snippet exit "process.exit" b
process.exit(${1:0})
endsnippet

### Functions:

# call
snippet do "(func())()" b
(function() {
	${1:// code}
})();
endsnippet

snippet fn "function"
function ${1:name}(${2:args}) {
	$0
}
endsnippet

#snippet fun
#function ${1:function_name}(${2:argument}) {
#${3:// body...}
#}
#endsnippet

snippet try "try {}" b
try {
${1:// code}
} catch (err) {
${2:console.error(err);}
}
endsnippet

# Prototype
snippet "([\w_0-9]+)::" ".proto" r
`!p snip.rv = match.group(1)`.prototype.
endsnippet
snippet :: "A.prototype.name = ..." b
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
endsnippet

# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

endsnippet
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0:/* code */}
	}
endsnippet
# try
snippet tryy
	try {
		${0:/* code */}
	} catch (e) {}
endsnippet
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
endsnippet
# Object Method
snippet :f "name: method"
${1:method_name}: function(${2:attribute}) {
	${0}
}${3:,}
endsnippet
# setTimeout function
snippet setTimeout
setTimeout(function() {${3:$TM_SELECTED_TEXT}}, ${1:10});
endsnippet
# Get Elements
snippet gett
getElementsBy${1:TagName}('${2}')${3}
endsnippet
# Get Element
snippet get
getElementBy${1:Id}('${2}')${3}
endsnippet
# console.log (Firebug)
snippet cl
	console.log(${1});
endsnippet
# return
snippet ret
	return ${1:result}
endsnippet
# for (property in object ) { ... }
snippet fori
for (let ${1:key} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet
snippet foro
for (let ${1:key} of ${2:object}) {
	${0:$2[$1]}
}
endsnippet
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
endsnippet
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @par
regex /^\s*\*\s*/@(para?m?)?/
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
endsnippet
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
endsnippet
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
endsnippet
# self-defining function
snippet sdf
	var ${1:function_name} = function(${2:argument}) {
		${3:// initial code ...}

		$1 = function($2) {
			${4:// main code}
		};
	}
endsnippet
# 
snippet for-
for (let ${1:i} = ${2:Things}.length; ${1:i}--; ) {
	${0:${2:Things}[${1:i}];}
}
endsnippet
# for (...) {...}
snippet for
for (let ${1:i} = 0; $1 < ${2:array}.length; $1++) {
	${3:$2[$1]}$0
}
endsnippet
# for (...) {...} (Improved Native For-Loop)
snippet forr
for (var ${1:i} = ${2:Things}.length - 1; $1 >= 0; $1--) {
	${3:$2[$1]}$0
}


endsnippet
